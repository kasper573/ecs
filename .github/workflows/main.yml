name: CI
on:
  push:
    branches: [ shared-dockerfile ]
    paths-ignore:
      - '**.md'
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Add short sha to environment variables (env.SHA)
        uses: benjlevesque/short-sha@v1.2

      - name: Prepare image tags
        run: |
          echo "API_TAG=ghcr.io/${{ github.repository }}/api:${{ env.SHA }}" >> $GITHUB_ENV
          echo "WEB_TAG=ghcr.io/${{ github.repository }}/web:${{ env.SHA }}" >> $GITHUB_ENV

      - uses: actions/checkout@v2

      - name: Build Dockerfile.api
        run: docker build -f Dockerfile.api -t ${{ env.API_TAG }} .

      - name: Run tests
        run: docker run ${{ env.API_TAG }} yarn test

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push api image
        run: docker push ${{ env.API_TAG }}

      - name: Build and push Dockerfile.web
        uses: docker/build-push-action@v2
        env:
          NODE_ENV: production
        with:
          context: .
          file: Dockerfile.web
          push: true
          tags: ${{ env.WEB_TAG }}

      - name: Make droplet able to log in to Github Container Registry
        uses: appleboy/ssh-action@master
        with:
          host: ecseditor.xyz
          username: ${{ secrets.DOCKER_SSH_USERNAME }}
          key: ${{ secrets.DOCKER_SSH_PRIVATE_KEY }}
          script: echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

      - name: Update docker-compose.yml to contain api & web image tags
        uses: mikefarah/yq@master
        with:
          cmd: yq eval '.services.api.image = "${{ env.API_TAG }}" | .services.web.image = "${{ env.WEB_TAG }}"' --inplace docker-compose.yml

      - name: Deploy to Docker Host
        uses: wshihadeh/docker-deployment-action@v1
        with:
          remote_docker_host: ${{ secrets.DOCKER_SSH_USERNAME }}@ecseditor.xyz
          ssh_private_key: ${{ secrets.DOCKER_SSH_PRIVATE_KEY }}
          ssh_public_key: ${{ secrets.DOCKER_SSH_KNOWNHOST }}
          deploy_path: /root/ecs
          deployment_mode: docker-compose
          copy_stack_file: true
          stack_file_name: docker-compose.yml
          args: up -d --no-build
          docker_prune: 'true'
          pull_images_first: 'true'